"""
Django settings for FinFlow project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os, json, pymysql
import secretkey
from pathlib import Path
from datetime import timedelta

# for using mysql DB
pymysql.install_as_MySQLdb()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
secret_json = os.path.join(BASE_DIR, 'secrets.json')

with open(secret_json) as f:
    secrets_key = json.loads(f.read())
    
SECRET_KEY = secretkey.get_secret("SECRET_KEY", secrets_key)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # for social login
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.kakao', 
    'allauth.socialaccount.providers.naver',     
    
    # for bootstrap4
    'bootstrap4',
]

INSTALLED_APPS += [
    'corsheaders',
    # django-rest-framework
    'rest_framework',
    'rest_framework_simplejwt',
    'user.apps.UserConfig',      
    'finflow_control.apps.FinflowControlConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS 미들웨어 추가
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware' #Whitenoise middleware 추가
]

ROOT_URLCONF = 'FinFlow.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'FinFlow.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 20,  # seconds
        }
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'dbfinflow',
#         'USER' : 'finflow',
#         'PASSWORD' : 'finflow1004',
#         'HOST' : '103.60.126.122',
#         'PORT' : '3306',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ko'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, '.static')

# Meida files
# https://docs.djangoproject.com/en/4.1/ref/settings/#MEDIA_URL
# https://docs.djangoproject.com/en/4.1/ref/settings/#MEDIA_ROOT

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS-HOSTS
#  HTTPS를 통한 요청임을 나타내는 HTTP 헤더를 정의합니다. 
# 프록시 또는 로드 밸런서 뒤에서 Django를 운영하는 경우 유용합니다.
#SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# 이 설정들은 쿠키가 오직 HTTPS를 통해서만 전송되도록 강제합니다. 
# 사이트가 전체적으로 HTTPS를 사용하는 경우에만 True로 설정해야 합니다.
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True

# 모든 요청을 HTTPS로 리다이렉트합니다. 사이트가 HTTPS를 전적으로 사용하는 경우에 적합합니다.
# SECURE_SSL_REDIRECT = True

# 모든 도메인에서의 CORS 요청을 허용합니다. 
# 이 설정이 True일 경우, CORS_ALLOWED_ORIGINS 및 CORS_ORIGIN_WHITELIST 설정은 무시됩니다. 
# 보안 관점에서, 특정 도메인에 대해서만 CORS 요청을 허용하는 것이 좋습니다.
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOWED_ORIGINS = [
#     "http://ilium.co.kr",  # 허용할 도메인 주소 추가    
#     "http://localhost:3000",
#     "http://127.0.0.1:8000",
#     "http://ilium.co.kr"
# ] 

# 허용할 HTTP 메소드와 헤더를 정의합니다. 
# API가 필요로 하는 메소드와 헤더에 맞추어 조정할 수 있습니다.
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
# 인증 정보(쿠키, HTTP 인증 및 클라이언트 SSL 인증서 등)를 포함한 요청을 허용합니다. 
# 보안상의 이유로, 필요한 경우에만 True로 설정해야 합니다.
CORS_ALLOW_CREDENTIALS = True

# Admin 사이트 http로 접근 시 접근 가능하도록
CSRF_TRUSTED_ORIGINS = ['https://ilium.co.kr']

# 여기에서는 JWT 인증을 사용하며, 모든 사용자에게 접근을 허용(AllowAny)하는 설정으로 되어 있습니다. 
# 필요에 따라 인증 방식을 변경하거나, 접근 권한을 조정할 수 있습니다.
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework.authentication.SessionAuthentication',
#         'rest_framework.authentication.BasicAuthentication',
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated', # 인증된 사용자만 접근
#         'rest_framework.permissions.IsAdminUser', # 관리자만 접근
#         'rest_framework.permissions.AllowAny', # 누구나 접근
#     ),
# }

# User Model settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
AUTH_USER_MODEL = "user.User"

# Social login
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)
SITE_ID = 1

ACCOUNT_USER_MODEL_USERNAME_FIELD = 'user_id'

# URL의 마지막에 SLASH 추가 여부
APPEND_SLASH = True

# for Logging
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': './log/finflow_logfile.log',  # 로그 파일 경로 지정
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }